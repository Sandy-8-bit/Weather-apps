@page "/chatbot"
@layout EmptyLayout


@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using BlazorWasmApp.Models
@using System.Text.Json
<PageTitle>Weather Chatbot</PageTitle>

<div class="chat-wrapper">
    <div class="chat-container">
        <div class="chat-header">
            <h3 class="title">🌦️ Weather Companion</h3>
        </div>

        <div class="messages" @ref="MessagesContainer">
            @foreach (var msg in Messages)
            {
                <div class="@($"message {(msg.IsUser ? "user-message" : "bot-message")} fade-in")"
                     @oncontextmenu="(e) => ShowContextMenu(e, msg)"
                @oncontextmenu:preventDefault>
                    <div class="message-content">
                        <strong>@(msg.IsUser ? "You" : "Weather Bot"):</strong>
                        <span>@msg.Content</span>

                        @if (msg.Weather != null)
                        {
                            <div class="weather-info gradient-bg">
                                <div class="weather-icons">
                                    <span class="icon">🌡️</span>
                                    <span class="icon">💧</span>
                                    <span class="icon">🌬️</span>
                                </div>
                                <div class="weather-details">
                                    <div>Temperature: @msg.Weather.Temperature°C</div>
                                    <div>Humidity: @msg.Weather.Humidity%</div>
                                    <div>Wind: @msg.Weather.WindSpeed km/h</div>
                                </div>
                            </div>
                        }
                    </div>
                    <small class="timestamp">@msg.Timestamp.ToString("hh:mm tt")</small>
                </div>
            }

            @if (IsLoading)
            {
                <div class="bot-message typing-indicator">
                    <span></span><span></span><span></span>
                </div>
            }
        </div>

        <div class="input-container">
            <input @bind="UserMessage"
                   @bind:event="oninput"
                   placeholder="Ask about the weather..."
                   @onkeydown="@HandleEnter"
                   class="input-field" />
            <button @onclick="SendMessage"
                    disabled="@IsLoading"
                    class="send-btn pulse-on-hover">
                Send
            </button>
            <button @onclick="DeleteAllChatHistory" class="delete-btn">🗑️</button>
        </div>
    </div>

    @if (ShowContextMenuForMessage != null)
    {
        <div class="context-menu" style="top: @(ContextMenuY)px; left: @(ContextMenuX)px;">
            <button @onclick="DeleteSpecificMessage">Delete Message</button>
        </div>
    }
</div>

@code {
    private string UserMessage = string.Empty;
    private List<ChatMessage> Messages = new();
    private bool IsLoading = false;
    private ElementReference MessagesContainer;
    private string? UserId;

    private ChatMessage? ShowContextMenuForMessage = null;
    private int ContextMenuX = 0;
    private int ContextMenuY = 0;

    protected override async Task OnInitializedAsync()
    {
        UserId = Guid.NewGuid().ToString();
        await localStorage.SetItemAsync("userId", UserId);

        var storedMessages = await localStorage.GetItemAsync<string>($"chatMessages_{UserId}");
        if (!string.IsNullOrEmpty(storedMessages))
        {
            Messages = JsonSerializer.Deserialize<List<ChatMessage>>(storedMessages) ?? new List<ChatMessage>();
        }

        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private void ShowContextMenu(MouseEventArgs e, ChatMessage message)
    {
        ShowContextMenuForMessage = message;
        ContextMenuX = (int)e.ClientX;
        ContextMenuY = (int)e.ClientY;
    }

    private async Task DeleteSpecificMessage()
    {
        if (ShowContextMenuForMessage != null)
        {
            Messages.Remove(ShowContextMenuForMessage);
            await SaveChatState();
            ShowContextMenuForMessage = null;
            StateHasChanged();
        }
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _ = SaveChatState();
    }

    private async Task SaveChatState()
    {
        if (string.IsNullOrEmpty(UserId)) return;

        var serializedMessages = JsonSerializer.Serialize(Messages);
        await localStorage.SetItemAsync($"chatMessages_{UserId}", serializedMessages);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserMessage) || IsLoading) return;

        Messages.Add(new ChatMessage { Content = UserMessage, IsUser = true, Timestamp = DateTime.Now });
        IsLoading = true;
        await SaveChatState();
        StateHasChanged();

        try
        {
            var request = new { Message = UserMessage };
            var response = await Http.PostAsJsonAsync("api/weatherchat", request);
            var result = await response.Content.ReadFromJsonAsync<ChatResponse>();

            if (result != null)
            {
                Messages.Add(new ChatMessage
                    {
                        Content = result.Response,
                        IsUser = false,
                        Timestamp = DateTime.Now,
                        Weather = result.Weather
                    });
                await SaveChatState();
            }
        }
        catch
        {
            Messages.Add(new ChatMessage { Content = "⚠️ Error connecting to chatbot.", IsUser = false, Timestamp = DateTime.Now });
        }

        IsLoading = false;
        UserMessage = string.Empty;
        await ScrollToBottom();
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") await SendMessage();
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100);
        await MessagesContainer.FocusAsync();
    }

    private async Task DeleteAllChatHistory()
    {
        if (string.IsNullOrEmpty(UserId)) return;

        Messages.Clear();
        await localStorage.RemoveItemAsync($"chatMessages_{UserId}");
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }


    public class ChatMessage
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.Now;
        public WeatherResponse? Weather { get; set; }
    }

    public class ChatResponse
    {
        public string Response { get; set; } = string.Empty;
        public WeatherResponse? Weather { get; set; }
    }

    public class WeatherResponse
    {
        public double Temperature { get; set; }
        public int Humidity { get; set; }
        public double WindSpeed { get; set; }
    }
}
<style>
/* Import Google Fonts & Icons */
@@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');
@@import url('https://fonts.googleapis.com/icon?family=Material+Icons');

/* Global Styles */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    font-family: 'Poppins', sans-serif;
}

.chat-wrapper {
    position: fixed;
    z-index: 1000;
    transition: all 0.3s ease-in-out;
}

        .chat-wrapper.full-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.7); /* Darken background */
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 99999; /* Ensure it's on top of everything */
        }

    /* Prevent background scrolling when in full-screen mode */
    body.fullscreen-mode {
        overflow: hidden;
    }


.chat-container {
    width: 400px;
    max-height: 600px;
    background: white;
    border-radius: 15px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    transition: all 0.3s ease-in-out;
}

.chat-container.expanded {
    height: 600px;
}

.chat-header {
    display: none;
    align-items: center;
    justify-content: space-between;
    padding: 15px;
    background: linear-gradient(135deg, #3498db, #2ecc71);
    color: white;
    cursor: pointer;

}

.header-buttons {
    display: flex;
    gap: 10px;
}

.toggle-btn {
    background: transparent;
    border: none;
    color: white;
    font-size: 20px;
    cursor: pointer;
    transition: transform 0.2s;
}

.toggle-btn:hover {
    transform: scale(1.1);
}

.messages {
    height: 400px;
    overflow-y: auto;
    padding: 15px;
    background: #f4f6f7;
    display: flex;
    flex-direction: column;
    scrollbar-width: thin;
}

.message {
    max-width: 80%;
    margin: 8px 0;
    padding: 12px;
    border-radius: 12px;
    animation: fadeIn 0.3s ease;
}

.user-message {
    background: #3498db;
    color: white;
    align-self: flex-end;
}

.bot-message {
    background: #ecf0f1;
    color: #2c3e50;
    align-self: flex-start;
}

.timestamp {
    font-size: 12px;
    color: gray;
    text-align: right;
    display: block;
}

.weather-info {
    background: rgba(52, 152, 219, 0.1);
    border-radius: 8px;
    padding: 8px;
    margin-top: 5px;
    font-size: 14px;
}

.weather-icons {
    display: flex;
    gap: 5px;
}

.input-container {
    display: flex;
    padding: 10px;
    background: white;
    border-top: 1px solid #ddd;
    align-items: center;
    gap: 10px;
}

.input-field {
    flex-grow: 1;
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #ddd;
    outline: none;
    transition: all 0.3s ease;
}

.input-field:focus {
    border-color: #3498db;
    box-shadow: 0 0 5px rgba(52, 152, 219, 0.3);
}

.send-btn, .delete-btn {
    padding: 10px;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
}

.send-btn {
    background: #3498db;
    color: white;
}

.send-btn:hover {
    background: #2980b9;
}

.delete-btn {
    background: red;
    color: white;
}

.delete-btn:hover {
    background: darkred;
}

.typing-indicator {
    display: flex;
    gap: 3px;
    align-self: flex-start;
}

.typing-indicator span {
    width: 8px;
    height: 8px;
    background: #2c3e50;
    border-radius: 50%;
    animation: blink 1.5s infinite;
}

.typing-indicator span:nth-child(2) {
    animation-delay: 0.2s;
}

.typing-indicator span:nth-child(3) {
    animation-delay: 0.4s;
}

.context-menu {
    position: fixed;
    background: white;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    z-index: 10000;
    animation: fadeIn 0.2s ease;
}

.context-menu button {
    display: block;
    width: 100%;
    padding: 10px;
    background: none;
    border: none;
    text-align: left;
    cursor: pointer;
}

.context-menu button:hover {
    background: #f0f0f0;
}

@@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(5px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@@keyframes blink {
    0% { opacity: 0.2; }
    50% { opacity: 1; }
    100% { opacity: 0.2; }
}

</style>