@page "/login"
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject ToasterService Toaster

<div class="login-container">
    <div class="login-card">
        <h3 class="login-title">Welcome Back!</h3>
        <p class="login-subtitle">Please login to your account</p>

        <EditForm Model="this" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>Email:</label>
                <InputText @bind-Value="Email" class="form-control" disabled="@IsLoading" />
            </div>

            <div class="form-group">
                <label>Password:</label>
                <InputText @bind-Value="Password" type="password" class="form-control" disabled="@IsLoading" />
            </div>

            <div class="form-links">
                <p>
                    Don't have an account?
                    <a href="register" class="register-link">Register</a>
                </p>
                <p>
                    <a href="recover-password">Forgot Password?</a>
                </p>
            </div>

            <button type="submit" class="login-btn" disabled="@IsLoading">
                @(IsLoading ? "Logging in..." : "Login")
            </button>

            @if (IsLoading)
            {
                <div class="spinner"></div>
            }
        </EditForm>

        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="error-message">@Message</p>
        }
    </div>
</div>

@code {
    private string Email { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var isLoggedIn = await AuthService.IsUserLoggedIn();
        if (isLoggedIn)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        IsLoading = true;
        StateHasChanged();

        bool isSuccess = await AuthService.LoginAsync(Email, Password);
        IsLoading = false;

        if (isSuccess)
        {
            Navigation.NavigateTo("/");
            await Toaster.ShowToast("Logged in successfully", "success");
        }
        else
        {
            Message = "Login failed. Please check your credentials.";
            await Toaster.ShowToast("Failed to login", "error");
        }
    }
}

<style>
    /* Center the login form */
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(135deg, #6a11cb, #2575fc);
    }

    /* Login Card */
    .login-card {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 400px;
        animation: fadeIn 0.5s ease-in-out;
    }

    /* Title */
    .login-title {
        text-align: center;
        font-size: 28px;
        color: #333;
        margin-bottom: 10px;
    }

    .login-subtitle {
        text-align: center;
        color: #666;
        margin-bottom: 20px;
    }

    /* Input Fields */
    .form-group {
        margin-bottom: 1.5rem;
    }

        .form-group label {
            font-weight: 600;
            color: #555;
            display: block;
            margin-bottom: 5px;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 16px;
        transition: border-color 0.3s ease;
    }

        .form-control:focus {
            border-color: #6a11cb;
            outline: none;
        }

    /* Button Styling */
    .login-btn {
        width: 100%;
        padding: 12px;
        background: linear-gradient(135deg, #6a11cb, #2575fc);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: 0.3s;
    }

        .login-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .login-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

    /* Links */
    .form-links {
        margin-top: 1rem;
        text-align: center;
    }

        .form-links a {
            color: #6a11cb;
            text-decoration: none;
            font-weight: 500;
        }

            .form-links a:hover {
                text-decoration: underline;
            }

    /* Error Message */
    .error-message {
        color: #ff4d4d;
        text-align: center;
        margin-top: 1rem;
    }

    /* Spinner Animation */
    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #6a11cb;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        animation: spin 1s linear infinite;
        margin: 20px auto;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>