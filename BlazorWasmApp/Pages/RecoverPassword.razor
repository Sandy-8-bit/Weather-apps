@page "/recover-password"
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="recover-container">
    <h2>Password Recovery</h2>
    <p>Enter your email address to receive a password reset link.</p>

    <div class="input-group">
        <label>Email Address:</label>
        <input @bind="Email" type="email" placeholder="Enter your email..." required />

        <button @onclick="SendRecoveryEmail" class="submit-btn" disabled="@IsLoading">
            @if (IsLoading)
            {
                <span>Sending...</span>
            }
            else
            {
                <span>Send Reset Link</span>
            }
        </button>
    </div>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="message @(IsSuccess ? "success" : "error")">@Message</p>
    }
</div>

@code {
    private string Email = string.Empty;
    private string Message = string.Empty;
    private bool IsSuccess = false;
    private bool IsLoading = false;

    private async Task SendRecoveryEmail()
    {
        if (string.IsNullOrWhiteSpace(Email))
        {
            Message = "Email is required.";
            IsSuccess = false;
            return;
        }

        IsLoading = true;
        Message = string.Empty;

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/recover-password", new { Email });
            var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();

            if (response.IsSuccessStatusCode)
            {
                Message = result?["message"] ?? "Recovery email sent!";
                IsSuccess = true;

                // Delay before navigation to ensure message is seen
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }

            else
            {
                Message = result?["message"] ?? "Failed to send recovery email.";
                IsSuccess = false;
            }
        }
        catch
        {
            Message = "An unexpected error occurred. Please try again.";
            IsSuccess = false;
        }
        finally
        {
            IsLoading = false;
        }
    }
}

<style>
    .recover-container {
        max-width: 400px;
        margin: 50px auto;
        padding: 20px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
        text-align: center;
    }

    h2 {
        color: #1976D2;
    }

    .input-group {
        margin-top: 15px;
        display: flex;
        flex-direction: column;
    }

    label {
        font-weight: bold;
        margin-bottom: 5px;
    }

    input {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        margin-bottom: 10px;
    }

    .submit-btn {
        padding: 10px;
        background: #1976D2;
        color: white;
        border: none;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        transition: background 0.3s;
    }

    .submit-btn:disabled {
        background: #cccccc;
        cursor: not-allowed;
    }

    .submit-btn:hover:not(:disabled) {
        background: #1565c0;
    }

    .message {
        margin-top: 15px;
        font-size: 14px;
        padding: 8px;
        border-radius: 5px;
    }

    .success {
        background: #d4edda;
        color: #155724;
    }

    .error {
        background: #f8d7da;
        color: #721c24;
    }
</style>
